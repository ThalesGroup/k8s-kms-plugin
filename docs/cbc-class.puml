@startuml

package k8s-kms-plugin {
interface Service
Service : \*EncryptResponse Encrypt(Context, *EncryptRequest)
Service : \*DecryptResponse Decrypt(Context, *DecryptRequest)

struct P11
P11 : []byte kid
P11 : []byte cid
P11 : \*crypto11.Config config
P11 : \*crypto11.Context ctx
P11 : map[string]gose.JweEncryptor encryptors
P11 : map[string]gose.JweDecryptor decryptors
P11 : bool createKey
P11 : string k8sDefaultDekLabel
P11 : string k8sHmacKeyLabel
P11 : jose.Alg algorithm
P11 : \*EncryptResponse Encrypt(Context, *EncryptRequest)
P11 : \*DecryptResponse Decrypt(Context, *DecryptRequest)

note right of P11::algorithm
define which type of encryptor (cbc, gcm) will be called
end note

Service <|-- P11
}

package crypto11 {

package "built-in crypto.cipher" {

interface BlockMode
BlockMode : CryptBlocks(dst, src []byte)

}

package "built-in hash" {

interface Hash
Hash : []byte Sum(b []byte)
}

struct BlockModeCloser
BlockModeCloser : \*pkcs11Session session
BlockModeCloser : int blockSize
BlockModeCloser : int mode
BlockModeCloser : func() cleanup
BlockModeCloser : BlockModeCloser NewCBCEncrypterCloser(iv []byte)
BlockModeCloser : BlockModeCloser NewCBCDecrypterCloser(iv []byte)
BlockModeCloser : CryptBlocks(dst, src []byte)
BlockModeCloser : Close()

struct HmacImplementation
HmacImplementation : \*pkcs11Session session
HmacImplementation : \*SecretKey key
HmacImplementation : int size
HmacImplementation : int blockSize
HmacImplementation : []*pkcs11.Mechanism mechDescription
HmacImplementation : func() cleanup
HmacImplementation : uint64 updates
HmacImplementation : []byte result
HmacImplementation : Hash NewHMAC(mech int, length int)
HmacImplementation : []byte Sum(b []byte)

BlockMode <|-- BlockModeCloser
Hash <|-- HmacImplementation

}

package gose {

interface BlockEncryptionKey
BlockEncryptionKey : []byte Seal(plaintext []byte)
BlockEncryptionKey : []byte Open(ciphertext []byte)

interface HmacKey
HmacKey :  []byte Hash(input []byte)

interface JweEncryptor
JweEncryptor : string Encrypt(plaintext, aad []byte)

interface JweDecryptor
JweDecryptor : (plaintext, aad []byte) Decrypt(jwe string)

struct AesCbcCryptor
AesCbcCryptor : string kid
AesCbcCryptor : jose.Alg alg
AesCbcCryptor : cipher.BlockMode blockCipher
AesCbcCryptor : BlockEncryptionKey NewAesCbcCryptor(blockCipher cipher.BlockMode, kid string, alg jose.Alg)
AesCbcCryptor : []byte Seal(plaintext []byte)
AesCbcCryptor : []byte Open(ciphertext []byte)

struct HmacShaCryptor
HmacShaCryptor : string kid
HmacShaCryptor : Hash hash
HmacShaCryptor : HmacKey NewHmacShaCryptor(kid string, hash Hash)
HmacShaCryptor : []byte Hash(input []byte)

struct JweDirectEncryptorBlock
JweDirectEncryptorBlock : BlockEncryptionKey aesKey
JweDirectEncryptorBlock : []byte iv
JweDirectEncryptorBlock : JweHmacVerifierImpl jweVerifier
JweDirectEncryptorBlock : \*JweDirectEncryptorBlock NewJweDirectEncryptorBlock(aesKey BlockEncryptionKey, hmacKey HmacKey, iv []byte)
JweDirectEncryptorBlock : (string, error) Encrypt(plaintext, aad []byte)

struct JweDirectDecryptorBlock
JweDirectDecryptorBlock : BlockEncryptionKey aesKey
JweDirectDecryptorBlock : JweHmacVerifierImpl jweVerifier
JweDirectDecryptorBlock : \*JweDirectDecryptorBlock NewJweDirectDecryptorBlock(aesKey BlockEncryptionKey, hmacKey HmacKey)
JweDirectDecryptorBlock : (plaintext, aad []byte, err error) Decrypt(marshalledJwe string)

BlockEncryptionKey <|-- AesCbcCryptor
HmacKey <|-- HmacShaCryptor
JweEncryptor <|-- JweDirectEncryptorBlock
JweDecryptor <|-- JweDirectDecryptorBlock

note "AesCbcCryptor wraps a BlockMode" as N1
AesCbcCryptor .. N1
N1 .. BlockMode

note "HmacShaCryptor wraps a Hash" as N2
HmacShaCryptor .. N2
N2 .. Hash

note "JweDirectEncryptorBlock wraps a BlockEncryptionKey and a HmacKey" as N3
JweDirectEncryptorBlock .. N3
N3 .. HmacKey
N3 .. BlockEncryptionKey

note "JweDirectDecryptorBlock wraps a BlockEncryptionKey and a HmacKey" as N4
JweDirectDecryptorBlock .. N4
N4 .. HmacKey
N4 .. BlockEncryptionKey
}

note "If the algorithm is CBC, P11 calls Encrypt() and Decrypt()\nfrom the JWE direct encryptors for block ciphers" as N5
gose <.. N5
N5 .. P11


@enduml
