//
// * // Copyright 2024 Thales Group 2020 Thales DIS CPL Inc
// * //
// * // Permission is hereby granted, free of charge, to any person obtaining
// * // a copy of this software and associated documentation files (the
// * // "Software"), to deal in the Software without restriction, including
// * // without limitation the rights to use, copy, modify, merge, publish,
// * // distribute, sublicense, and/or sell copies of the Software, and to
// * // permit persons to whom the Software is furnished to do so, subject to
// * // the following conditions:
// * //
// * // The above copyright notice and this permission notice shall be
// * // included in all copies or substantial portions of the Software.
// * //
// * // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// * // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// * // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// * // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// * // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// * // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// * // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

syntax = "proto3";

package thalescpl.io.ekms.kms.v1;

option go_package = "github.com/thalescpl-io/k8s-kms-plugin/apis/kms/v1;kms";

import "apis/kms/v1/messages.proto";

service KMSPluginService {
  // Version returns the runtime name and runtime version of the KMS provider.
  rpc Version(VersionRequest) returns (VersionResponse);
  // GenerateCAK returns the kid, and it's public key of a new Key Pair in the PKCS11 device
  rpc GenerateCAK(GenerateCAKRequest) returns (GenerateCAKResponse);
  // GenerateCA Certificate and store in in the PKCS11 device
  rpc GenerateCA(GenerateCARequest) returns (GenerateCAResponse);
  // DestroyCAK in the PKCS11 device... this is NON-REVERSIBLE...
  rpc DestroyCAK(DestroyCAKRequest) returns (DestroyCAKResponse);
  // DestroyCA in the PKCS11 device... this is NON-REVERSIBLE...
  rpc DestroyCA(DestroyCARequest) returns (DestroyCAResponse);
  // SignCSR signs a CSR for the in inbound
  rpc SignCSR(SignCSRRequest) returns (SignCSRResponse);
  // GenerateKEK returns the KID of the GeneratedKEK if allowed/successful
  rpc GenerateKEK(GenerateKEKRequest) returns (GenerateKEKResponse);
  // DestroyKEK returns a success/failure to destroy the KEK... this is NON-REVERSIBLE...
  rpc DestroyKEK(DestroyKEKRequest) returns (DestroyKEKResponse);
}
