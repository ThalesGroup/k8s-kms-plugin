//
// * // Copyright 2024 Thales Group 2020 Thales DIS CPL Inc
// * //
// * // Permission is hereby granted, free of charge, to any person obtaining
// * // a copy of this software and associated documentation files (the
// * // "Software"), to deal in the Software without restriction, including
// * // without limitation the rights to use, copy, modify, merge, publish,
// * // distribute, sublicense, and/or sell copies of the Software, and to
// * // permit persons to whom the Software is furnished to do so, subject to
// * // the following conditions:
// * //
// * // The above copyright notice and this permission notice shall be
// * // included in all copies or substantial portions of the Software.
// * //
// * // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// * // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// * // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// * // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// * // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// * // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// * // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

syntax = "proto3";

package thalescpl.io.ekms.kms.v1;

option go_package = "github.com/thalescpl-io/k8s-kms-plugin/apis/kms/v1;kms";

import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

enum KeyKind {
  UNKNOWN = 0;
  AES = 1;
  RSA = 2;
  ECC = 3;
}

message VersionRequest {
  // Version of the KMS plugin API.
  string version = 1;
}

message VersionResponse {
  // Version of the KMS plugin API.
  string version = 1;
  // Name of the KMS provider.
  string runtime_name = 2;
  // Version of the KMS provider. The string must be semver-compatible.
  string runtime_version = 3;
}

message GenerateKEKRequest {
  // optional kid, otherwise will be autogenerated as a UUID.v4 in the response
  bytes kek_kid = 1;
}

message GenerateKEKResponse {
  // KEK kid
  bytes kek_kid = 1;
}

message DestroyKEKRequest {
  // Required kid of KEK to find and delete
  bytes kek_kid = 1;
}

message DestroyKEKResponse {
  // successful destroy?
  bool success = 1;
}

message GenerateCAKRequest {
  // key size in bits
  int64 size = 1;
  // What kind of key is it... only Asymmetric kinds will be supported
  KeyKind kind = 2;
  // Root CA Key ID
  bytes root_ca_kid = 3;
}

message GenerateCAKResponse {
  // Root CA Key ID
  bytes root_ca_kid = 1;
}

message GenerateCARequest {
  // Root CA Key ID
  bytes root_ca_kid = 1;
}

message GenerateCAResponse {
  // Root CA cert in PEM format
  bytes cert = 1;
}

message DestroyCAKRequest {
  // Required kid of KEK to find and delete
  bytes kek_kid = 1;
}

message DestroyCAKResponse {
  // successful destroy?
  bool success = 1;
}

message DestroyCARequest {
  // Required kid of KEK to find and delete
  bytes kek_kid = 1;
}

message DestroyCAResponse {
  // successful destroy?
  bool success = 1;
}

message SignCSRRequest {
  // Encrypted blob of DEK
  bytes csr = 1;
  // Root CA Key ID
  bytes root_ca_kid = 2;
}

message SignCSRResponse {
  // Certificate in PEM Form
  bytes cert = 1;
}
