name: Publish release

description: Publish release, container image, SBOMS, signs artifacts. 

inputs:
  go-version:
    required: true
    description: go version to install on the runner
  github_token: 
    required : true
    description: github token used for the release
  registry_username:
    required: true
    description: Container registry username
  registry_password:
    required: true
    description: Container registry password 
  registry:
    required: true 
    description: registry used to publish container images


outputs:
  hashes:
    value: ${{ steps.binary.outputs.hashes }}
    description: hash of the cheksum file in base64
  name: 
    value: ${{ steps.image.outputs.name }}
    description: name of the published container image
  digest: 
    value: ${{ steps.image.outputs.digest }}
    description: published image digest

runs: 
  using: composite
  steps:
    # Install go with specific version
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }} # same version than the one in the go.mod or in the .go-version
     # Register to ghcr.io container Registry
    - name: 'Login to GitHub Container Registry'
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.registry}}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }} 
    # Install ko to publish container images
    - name: Set up Ko
      uses: ko-build/setup-ko@v0.6
    # Install cosign to sign artfacts with goreleaser 
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.5.0
    # Get LDFLAGS with a makefile command
    - shell: bash
      name: Get LDFLAGS
      id: get_ldlflags # need to define id to pass the variable to other steps
      run : |
        echo "ldflags= $(make get-ldflags)" >> "$GITHUB_OUTPUT"
    # Install other dependencies like scanners and go librairies
    - shell: bash 
      name : Install dependencies
      run : |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.49.1
    # Run command goreleaser release based on .goreleaser.yml
    # LDFLAGS are passed thanks to the steps.job_id.outputs.variable_name variable
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      id: goreleaser 
      with:
        distribution: goreleaser 
        version: latest
        args: release 
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        LDFLAGS: ${{steps.get_ldlflags.outputs.ldflags}}
    # Get artifacts from goreleaser's step outputs to generate cheksums file abse64 hashes
    # Provenance generator action needs to have a base64 hash for generating blobs provenance
    # The hash is passed as an output of goreleaser job
    - shell: bash 
      name: Generate binary hashes
      id: binary
      env:
        ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
      run: |
          set -euo pipefail
          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
          echo "hashes=$(cat $checksum_file | base64 -w0)" >> "$GITHUB_OUTPUT"
    # Get artifacts from the goreleaser's step outputs to retrieve Docker Manifest containing the image and its digest
    # Image Provenance generator action needs to have the image name and a digest for generating provenance and publish it to the container registry
    - shell: bash 
      name: Image digest
      id: image
      env:
        ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
      run: |
          set -euo pipefail
          image_and_digest=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Docker Manifest") | .path')
          image=$(echo "${image_and_digest}" | cut -d'@' -f1 | cut -d':' -f1)
          digest=$(echo "${image_and_digest}" | cut -d'@' -f2)
          echo "name=$image" >> "$GITHUB_OUTPUT"
          echo "digest=$digest" >> "$GITHUB_OUTPUT"
    # Sign image with cosign sign command
    - shell: bash
      name: Generate Image Signature
      env:
        #COSIGN_REPOSITORY: ghcr.io/${{github.owner}}/signatures # need to use this variable for having a dfiferent signature repository 
        IMAGE: ${{ steps.image.outputs.name }}@${{ steps.image.outputs.digest }}
      run : |
        cosign sign --yes \
        ${{ env.IMAGE }}